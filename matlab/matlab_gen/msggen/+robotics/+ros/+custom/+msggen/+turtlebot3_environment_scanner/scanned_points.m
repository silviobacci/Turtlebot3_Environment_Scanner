classdef scanned_points < robotics.ros.Message
    %scanned_points MATLAB implementation of turtlebot3_environment_scanner/scanned_points
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'turtlebot3_environment_scanner/scanned_points' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '62171ee856d4f748f4b901016f7b2dcc' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        Turtlebot3EnvironmentScannerObstaclePointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('turtlebot3_environment_scanner/obstacle_point') % Dispatch to MATLAB class for message type turtlebot3_environment_scanner/obstacle_point
    end
    
    properties (Dependent)
        MinDistance
        MaxDistance
        Obstacle
    end
    
    properties (Access = protected)
        Cache = struct('Obstacle', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'MaxDistance', 'MinDistance', 'Obstacle'} % List of non-constant message properties
        ROSPropertyList = {'max_distance', 'min_distance', 'obstacle'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = scanned_points(msg)
            %scanned_points Construct the message object scanned_points
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function mindistance = get.MinDistance(obj)
            %get.MinDistance Get the value for property MinDistance
            mindistance = single(obj.JavaMessage.getMinDistance);
        end
        
        function set.MinDistance(obj, mindistance)
            %set.MinDistance Set the value for property MinDistance
            validateattributes(mindistance, {'numeric'}, {'nonempty', 'scalar'}, 'scanned_points', 'MinDistance');
            
            obj.JavaMessage.setMinDistance(mindistance);
        end
        
        function maxdistance = get.MaxDistance(obj)
            %get.MaxDistance Get the value for property MaxDistance
            maxdistance = single(obj.JavaMessage.getMaxDistance);
        end
        
        function set.MaxDistance(obj, maxdistance)
            %set.MaxDistance Set the value for property MaxDistance
            validateattributes(maxdistance, {'numeric'}, {'nonempty', 'scalar'}, 'scanned_points', 'MaxDistance');
            
            obj.JavaMessage.setMaxDistance(maxdistance);
        end
        
        function obstacle = get.Obstacle(obj)
            %get.Obstacle Get the value for property Obstacle
            if isempty(obj.Cache.Obstacle)
                javaArray = obj.JavaMessage.getObstacle;
                array = obj.readJavaArray(javaArray, obj.Turtlebot3EnvironmentScannerObstaclePointClass);
                obj.Cache.Obstacle = feval(obj.Turtlebot3EnvironmentScannerObstaclePointClass, array);
            end
            obstacle = obj.Cache.Obstacle;
        end
        
        function set.Obstacle(obj, obstacle)
            %set.Obstacle Set the value for property Obstacle
            if ~isvector(obstacle) && isempty(obstacle)
                % Allow empty [] input
                obstacle = feval([obj.Turtlebot3EnvironmentScannerObstaclePointClass '.empty'], 0, 1);
            end
            
            validateattributes(obstacle, {obj.Turtlebot3EnvironmentScannerObstaclePointClass}, {'vector'}, 'scanned_points', 'Obstacle');
            
            javaArray = obj.JavaMessage.getObstacle;
            array = obj.writeJavaArray(obstacle, javaArray, obj.Turtlebot3EnvironmentScannerObstaclePointClass);
            obj.JavaMessage.setObstacle(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Obstacle)
                obj.Cache.Obstacle = [];
                obj.Cache.Obstacle = obj.Obstacle;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Obstacle = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MinDistance = obj.MinDistance;
            cpObj.MaxDistance = obj.MaxDistance;
            
            % Recursively copy compound properties
            cpObj.Obstacle = copy(obj.Obstacle);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MinDistance = strObj.MinDistance;
            obj.MaxDistance = strObj.MaxDistance;
            ObstacleCell = arrayfun(@(x) feval([obj.Turtlebot3EnvironmentScannerObstaclePointClass '.loadobj'], x), strObj.Obstacle, 'UniformOutput', false);
            obj.Obstacle = vertcat(ObstacleCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MinDistance = obj.MinDistance;
            strObj.MaxDistance = obj.MaxDistance;
            strObj.Obstacle = arrayfun(@(x) saveobj(x), obj.Obstacle);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.turtlebot3_environment_scanner.scanned_points.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.turtlebot3_environment_scanner.scanned_points;
            obj.reload(strObj);
        end
    end
end
