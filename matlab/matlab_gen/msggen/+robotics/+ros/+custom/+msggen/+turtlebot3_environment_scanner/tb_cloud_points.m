classdef tb_cloud_points < robotics.ros.Message
    %tb_cloud_points MATLAB implementation of turtlebot3_environment_scanner/tb_cloud_points
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'turtlebot3_environment_scanner/tb_cloud_points' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ac416a37a5d3e7ab4f4d69c0672c1b67' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        TbX
        TbY
        CloudX
        CloudY
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CloudX', 'CloudY', 'TbX', 'TbY'} % List of non-constant message properties
        ROSPropertyList = {'cloud_x', 'cloud_y', 'tb_x', 'tb_y'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = tb_cloud_points(msg)
            %tb_cloud_points Construct the message object tb_cloud_points
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function tbx = get.TbX(obj)
            %get.TbX Get the value for property TbX
            tbx = double(obj.JavaMessage.getTbX);
        end
        
        function set.TbX(obj, tbx)
            %set.TbX Set the value for property TbX
            validateattributes(tbx, {'numeric'}, {'nonempty', 'scalar'}, 'tb_cloud_points', 'TbX');
            
            obj.JavaMessage.setTbX(tbx);
        end
        
        function tby = get.TbY(obj)
            %get.TbY Get the value for property TbY
            tby = double(obj.JavaMessage.getTbY);
        end
        
        function set.TbY(obj, tby)
            %set.TbY Set the value for property TbY
            validateattributes(tby, {'numeric'}, {'nonempty', 'scalar'}, 'tb_cloud_points', 'TbY');
            
            obj.JavaMessage.setTbY(tby);
        end
        
        function cloudx = get.CloudX(obj)
            %get.CloudX Get the value for property CloudX
            javaArray = obj.JavaMessage.getCloudX;
            array = obj.readJavaArray(javaArray, 'double');
            cloudx = double(array);
        end
        
        function set.CloudX(obj, cloudx)
            %set.CloudX Set the value for property CloudX
            validateattributes(cloudx, {'numeric'}, {'vector', 'numel', 360}, 'tb_cloud_points', 'CloudX');
            
            javaArray = obj.JavaMessage.getCloudX;
            array = obj.writeJavaArray(cloudx, javaArray, 'double');
            obj.JavaMessage.setCloudX(array);
        end
        
        function cloudy = get.CloudY(obj)
            %get.CloudY Get the value for property CloudY
            javaArray = obj.JavaMessage.getCloudY;
            array = obj.readJavaArray(javaArray, 'double');
            cloudy = double(array);
        end
        
        function set.CloudY(obj, cloudy)
            %set.CloudY Set the value for property CloudY
            validateattributes(cloudy, {'numeric'}, {'vector', 'numel', 360}, 'tb_cloud_points', 'CloudY');
            
            javaArray = obj.JavaMessage.getCloudY;
            array = obj.writeJavaArray(cloudy, javaArray, 'double');
            obj.JavaMessage.setCloudY(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TbX = obj.TbX;
            cpObj.TbY = obj.TbY;
            cpObj.CloudX = obj.CloudX;
            cpObj.CloudY = obj.CloudY;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TbX = strObj.TbX;
            obj.TbY = strObj.TbY;
            obj.CloudX = strObj.CloudX;
            obj.CloudY = strObj.CloudY;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TbX = obj.TbX;
            strObj.TbY = obj.TbY;
            strObj.CloudX = obj.CloudX;
            strObj.CloudY = obj.CloudY;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.turtlebot3_environment_scanner.tb_cloud_points.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.turtlebot3_environment_scanner.tb_cloud_points;
            obj.reload(strObj);
        end
    end
end
