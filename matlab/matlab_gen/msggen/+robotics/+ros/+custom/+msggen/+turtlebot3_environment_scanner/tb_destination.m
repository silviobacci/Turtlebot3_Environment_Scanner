classdef tb_destination < robotics.ros.Message
    %tb_destination MATLAB implementation of turtlebot3_environment_scanner/tb_destination
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'turtlebot3_environment_scanner/tb_destination' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e961782bcaddad1cbdc755ba5be81bfb' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        FinalDestinationX
        FinalDestinationY
        DestinationX
        DestinationY
        MotionState
        TbX
        TbY
        TbYaw
        TbLinearVelocity
        TbAngularVelocity
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DestinationX', 'DestinationY', 'FinalDestinationX', 'FinalDestinationY', 'MotionState', 'TbAngularVelocity', 'TbLinearVelocity', 'TbX', 'TbY', 'TbYaw'} % List of non-constant message properties
        ROSPropertyList = {'destination_x', 'destination_y', 'final_destination_x', 'final_destination_y', 'motion_state', 'tb_angular_velocity', 'tb_linear_velocity', 'tb_x', 'tb_y', 'tb_yaw'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = tb_destination(msg)
            %tb_destination Construct the message object tb_destination
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function finaldestinationx = get.FinalDestinationX(obj)
            %get.FinalDestinationX Get the value for property FinalDestinationX
            finaldestinationx = double(obj.JavaMessage.getFinalDestinationX);
        end
        
        function set.FinalDestinationX(obj, finaldestinationx)
            %set.FinalDestinationX Set the value for property FinalDestinationX
            validateattributes(finaldestinationx, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'FinalDestinationX');
            
            obj.JavaMessage.setFinalDestinationX(finaldestinationx);
        end
        
        function finaldestinationy = get.FinalDestinationY(obj)
            %get.FinalDestinationY Get the value for property FinalDestinationY
            finaldestinationy = double(obj.JavaMessage.getFinalDestinationY);
        end
        
        function set.FinalDestinationY(obj, finaldestinationy)
            %set.FinalDestinationY Set the value for property FinalDestinationY
            validateattributes(finaldestinationy, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'FinalDestinationY');
            
            obj.JavaMessage.setFinalDestinationY(finaldestinationy);
        end
        
        function destinationx = get.DestinationX(obj)
            %get.DestinationX Get the value for property DestinationX
            destinationx = double(obj.JavaMessage.getDestinationX);
        end
        
        function set.DestinationX(obj, destinationx)
            %set.DestinationX Set the value for property DestinationX
            validateattributes(destinationx, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'DestinationX');
            
            obj.JavaMessage.setDestinationX(destinationx);
        end
        
        function destinationy = get.DestinationY(obj)
            %get.DestinationY Get the value for property DestinationY
            destinationy = double(obj.JavaMessage.getDestinationY);
        end
        
        function set.DestinationY(obj, destinationy)
            %set.DestinationY Set the value for property DestinationY
            validateattributes(destinationy, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'DestinationY');
            
            obj.JavaMessage.setDestinationY(destinationy);
        end
        
        function motionstate = get.MotionState(obj)
            %get.MotionState Get the value for property MotionState
            motionstate = double(obj.JavaMessage.getMotionState);
        end
        
        function set.MotionState(obj, motionstate)
            %set.MotionState Set the value for property MotionState
            validateattributes(motionstate, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'MotionState');
            
            obj.JavaMessage.setMotionState(motionstate);
        end
        
        function tbx = get.TbX(obj)
            %get.TbX Get the value for property TbX
            tbx = double(obj.JavaMessage.getTbX);
        end
        
        function set.TbX(obj, tbx)
            %set.TbX Set the value for property TbX
            validateattributes(tbx, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'TbX');
            
            obj.JavaMessage.setTbX(tbx);
        end
        
        function tby = get.TbY(obj)
            %get.TbY Get the value for property TbY
            tby = double(obj.JavaMessage.getTbY);
        end
        
        function set.TbY(obj, tby)
            %set.TbY Set the value for property TbY
            validateattributes(tby, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'TbY');
            
            obj.JavaMessage.setTbY(tby);
        end
        
        function tbyaw = get.TbYaw(obj)
            %get.TbYaw Get the value for property TbYaw
            tbyaw = double(obj.JavaMessage.getTbYaw);
        end
        
        function set.TbYaw(obj, tbyaw)
            %set.TbYaw Set the value for property TbYaw
            validateattributes(tbyaw, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'TbYaw');
            
            obj.JavaMessage.setTbYaw(tbyaw);
        end
        
        function tblinearvelocity = get.TbLinearVelocity(obj)
            %get.TbLinearVelocity Get the value for property TbLinearVelocity
            tblinearvelocity = double(obj.JavaMessage.getTbLinearVelocity);
        end
        
        function set.TbLinearVelocity(obj, tblinearvelocity)
            %set.TbLinearVelocity Set the value for property TbLinearVelocity
            validateattributes(tblinearvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'TbLinearVelocity');
            
            obj.JavaMessage.setTbLinearVelocity(tblinearvelocity);
        end
        
        function tbangularvelocity = get.TbAngularVelocity(obj)
            %get.TbAngularVelocity Get the value for property TbAngularVelocity
            tbangularvelocity = double(obj.JavaMessage.getTbAngularVelocity);
        end
        
        function set.TbAngularVelocity(obj, tbangularvelocity)
            %set.TbAngularVelocity Set the value for property TbAngularVelocity
            validateattributes(tbangularvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'tb_destination', 'TbAngularVelocity');
            
            obj.JavaMessage.setTbAngularVelocity(tbangularvelocity);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.FinalDestinationX = obj.FinalDestinationX;
            cpObj.FinalDestinationY = obj.FinalDestinationY;
            cpObj.DestinationX = obj.DestinationX;
            cpObj.DestinationY = obj.DestinationY;
            cpObj.MotionState = obj.MotionState;
            cpObj.TbX = obj.TbX;
            cpObj.TbY = obj.TbY;
            cpObj.TbYaw = obj.TbYaw;
            cpObj.TbLinearVelocity = obj.TbLinearVelocity;
            cpObj.TbAngularVelocity = obj.TbAngularVelocity;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FinalDestinationX = strObj.FinalDestinationX;
            obj.FinalDestinationY = strObj.FinalDestinationY;
            obj.DestinationX = strObj.DestinationX;
            obj.DestinationY = strObj.DestinationY;
            obj.MotionState = strObj.MotionState;
            obj.TbX = strObj.TbX;
            obj.TbY = strObj.TbY;
            obj.TbYaw = strObj.TbYaw;
            obj.TbLinearVelocity = strObj.TbLinearVelocity;
            obj.TbAngularVelocity = strObj.TbAngularVelocity;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FinalDestinationX = obj.FinalDestinationX;
            strObj.FinalDestinationY = obj.FinalDestinationY;
            strObj.DestinationX = obj.DestinationX;
            strObj.DestinationY = obj.DestinationY;
            strObj.MotionState = obj.MotionState;
            strObj.TbX = obj.TbX;
            strObj.TbY = obj.TbY;
            strObj.TbYaw = obj.TbYaw;
            strObj.TbLinearVelocity = obj.TbLinearVelocity;
            strObj.TbAngularVelocity = obj.TbAngularVelocity;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.turtlebot3_environment_scanner.tb_destination.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.turtlebot3_environment_scanner.tb_destination;
            obj.reload(strObj);
        end
    end
end
