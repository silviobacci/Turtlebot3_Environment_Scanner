#ifndef COMMON_S3D
#define COMMON_S3D

var RADTODEG=180/Pi;
var DEGTORAD=Pi/180;


//var Time = 0.0;
//var Dt = 0.0;
//var frozen = false;


function LoadShader(ShaderName)
{
	var Shader = CVmShaderProgram(ShaderName);

	var shaderLog = Shader.GetLinkerLog();  
	outputln("Loading Shader", ShaderName);
	outputln(shaderLog); 
	
	var index;
    var name; 
   	var type;
    var nameType;
    var size; 


	for (index =0; index<Shader.GetUniformCount(); index++)
	{
		Shader.GetUniform( index, &name, &type, &nameType, &size );
		outputln("Uniform ", index, name, type, nameType, size);
	}
	return Shader;
}




function DrawLine(A, B) 
{

	glBegin(GL_LINES);
			glVertex(A);
			glVertex(B);
	glEnd();
}
	





function DrawAxis(o, ax,color){
	Var axlen=0.1;
	
	glColor(color);
	glLineWidth(4);
	glBegin(GL_LINES);
	  glVertex(o);
      glVertex(o+ax*axlen);
	glEnd();
}


function DrawAxes(o,xax,yax,zax){
	glPushAttrib(GL_LIGHTING|GL_DEPTH_TEST);
	glDisable(GL_LIGHTING);
	glDisable(GL_DEPTH_TEST);
	glLineWidth(3.0);
	glColor(1.0, 0.0, 0.0,1.0);
	DrawAxis(o,xAx);
	glColor(0.0, 1.0, 0.0,1.0);
	DrawAxis(o,yAx);
	glColor(0.0, 0.0, 1.0,1.0);
	DrawAxis(o,zAx);
	glPopAttrib();
}

function DrawAAxes(o){
	DrawAxes(o,[1,0,0],[0,1,0],[0,0,1]);
}

class CVmVec3f
{
	var theVec;
	setValue(vec);
	setPosition(vec);
	getPosition();
	getValue();
	addValue(x);
};

function CVmVec3f::CVmVec3f(x,y,z){
	theVec=[x,y,z];
}

function CVmVec3f::setValue(vec)
{
	theVec=vec;
}
function CVmVec3f::getValue()
{
	return theVec;
}

function CVmVec3f::setPosition(vec)
{
	theVec=vec;
}
function CVmVec3f::getPosition()
{
	return theVec;
}


function CVmVec3f::addValue(x){
	theVec+=x;
}


class CVmFloat
{
	var theFloat;
	setValue(x);
	getValue();
	addValue(x);
};

function CVmFloat::CVmFloat(x){
	theFloat=x;
}

function CVmFloat::setValue(x)
{
	theFloat=x;
}
function CVmFloat::getValue()
{
	return theFloat;
}

function CVmFloat::addValue(x)
{
	theFloat+=x;
}



#endif //COMMON_S3D
